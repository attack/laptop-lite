#!/usr/bin/env bash

# Ask for the administrator password upfront
sudo -v
### end common-components/bash-shebang

# Welcome to the laptop script! Be prepared to turn your laptop (or
# desktop, no haters here) into an awesome development machine.

# This file is auto-generated. Do not edit it by hand unless you know what
# you're doing. Please see 'CONTRIBUTING.md' for more information.
### end common-components/header

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e
### end common-components/exit-trap

if [[ ! -d "$HOME/.bin/" ]]; then
  mkdir "$HOME/.bin"
fi
### end common-components/check-home-bin

fancy_echo() {
  printf "\n%b\n" "$1"
}

less_fancy_echo() {
  printf "%b\n" "$1"
}

function pause(){
   read -p "$*"
}
### end common-components/shared-functions

DULL=0
BRIGHT=1

FG_BLACK=30
FG_RED=31
FG_GREEN=32
FG_YELLOW=33
FG_BLUE=34
FG_VIOLET=35
FG_CYAN=36
FG_WHITE=37

FG_NULL=00

BG_BLACK=40
BG_RED=41
BG_GREEN=42
BG_YELLOW=43
BG_BLUE=44
BG_VIOLET=45
BG_CYAN=46
BG_WHITE=47

BG_NULL=00

##
# ANSI Escape Commands
##
ESC="\033"
NORMAL="$ESC[m"
RESET="$ESC[${DULL};${FG_WHITE};${BG_NULL}m"

BLACK="$ESC[${DULL};${FG_BLACK}m"
RED="$ESC[${DULL};${FG_RED}m"
GREEN="$ESC[${DULL};${FG_GREEN}m"
YELLOW="$ESC[${DULL};${FG_YELLOW}m"
BLUE="$ESC[${DULL};${FG_BLUE}m"
VIOLET="$ESC[${DULL};${FG_VIOLET}m"
CYAN="$ESC[${DULL};${FG_CYAN}m"
WHITE="$ESC[${DULL};${FG_WHITE}m"

# BRIGHT TEXT
BRIGHT_BLACK="$ESC[${BRIGHT};${FG_BLACK}m"
BRIGHT_RED="$ESC[${BRIGHT};${FG_RED}m"
BRIGHT_GREEN="$ESC[${BRIGHT};${FG_GREEN}m"
BRIGHT_YELLOW="$ESC[${BRIGHT};${FG_YELLOW}m"
BRIGHT_BLUE="$ESC[${BRIGHT};${FG_BLUE}m"
BRIGHT_VIOLET="$ESC[${BRIGHT};${FG_VIOLET}m"
BRIGHT_CYAN="$ESC[${BRIGHT};${FG_CYAN}m"
BRIGHT_WHITE="$ESC[${BRIGHT};${FG_WHITE}m"
### end common-components/colours

start_if_needed() {
  local grep_name="[${1:0:1}]${1:1}"

  if [[ -z $(ps aux | grep -e "${grep_name}") ]]; then
    if [ -e ~/Applications/$1.app ]; then
      open ~/Applications/$1.app
    else
      if [ -e /Applications/$1.app ]; then
        open /Applications/$1.app
      fi
    fi
  fi

  true
}
### end mac-components/shared-functions

fancy_echo "Setting OSX settings ..."

  # General UI/UX
  #

  # Disable the sound effects on boot
  sudo nvram SystemAudioVolume=%80

  # Expand save panel by default
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

  # Save to disk (not to iCloud) by default
  defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

  # Disable the “Are you sure you want to open this application?” dialog
  defaults write com.apple.LaunchServices LSQuarantine -bool false

  # Trackpad, mouse, keyboard, Bluetooth accessories, and input
  #

  # Disable press-and-hold for keys in favour of key repeat.
  defaults write -g ApplePressAndHoldEnabled -bool false

  # Screen
  #

  # Require password immediately after sleep or screen saver begins
  defaults write com.apple.screensaver askForPassword -int 1
  defaults write com.apple.screensaver askForPasswordDelay -int 0

  # Disable shadow in screenshots
  defaults write com.apple.screencapture disable-shadow -bool true

  # Dock
  #

  # Remove the auto-hiding Dock delay
  defaults write com.apple.dock autohide-delay -float 0
  # Reduce the animation when hiding/showing the Dock
  defaults write com.apple.dock autohide-time-modifier -float 0.15

  # Automatically hide and show the Dock
  defaults write com.apple.dock autohide -bool true

  # Make Dock icons of hidden applications translucent
  defaults write com.apple.dock showhidden -bool true

  # Make Dock more transparent
  defaults write com.apple.dock hide-mirror -bool true

  # Finder
  #

  # Set Desktop as the default location for new Finder windows
  # For other paths, use `PfLo` and `file:///full/path/here/`
  defaults write com.apple.finder NewWindowTarget -string "PfDe"
  defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/Desktop/"

  # Finder: show all filename extensions
  defaults write NSGlobalDomain AppleShowAllExtensions -bool true

  # Finder: show status bar
  defaults write com.apple.finder ShowStatusBar -bool true

  # Finder: show path bar
  defaults write com.apple.finder ShowPathbar -bool true

  # Finder: allow text selection in Quick Look
  defaults write com.apple.finder QLEnableTextSelection -bool true

  # Display full POSIX path as Finder window title
  defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

  # When performing a search, search the current folder by default
  defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

  # Disable the warning when changing a file extension
  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

  # Show the ~/Library folder.
  chflags nohidden ~/Library

  # Time Machine
  #

  # Prevent Time Machine from prompting to use new hard drives as backup volume
  defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true


less_fancy_echo "Restarting affected apps, some of these changes require a logout/restart ..."

  for app in "cfprefsd" "Finder" "SystemUIServer"; do
    killall "${app}" > /dev/null 2>&1
  done
### end mac-components/osx

if ! which brew &>/dev/null; then
  fancy_echo "Installing Homebrew, a good OS X package manager ..."
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    export PATH="/usr/local/bin:$PATH"
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

fancy_echo "Updating Homebrew formulas ..."
brew update

brew_install() {
  if brew list -1 | grep -q "^$1"; then
    less_fancy_echo "... skipping $1, already installed"
  else
    brew install $1
  fi

  true
}

brew_uninstall() {
  if brew list -1 | grep -q "^$1"; then
    brew uninstall $1
  else
    less_fancy_echo "... skip removing $1, not installed"
  fi

  true
}

brew_install_or_upgrade() {
  if brew list -1 | grep -q "^$1"; then
    if brew outdated -q | grep -q "^$1"; then
      brew upgrade $1
    else
      less_fancy_echo "... skipping $1, already installed and current"
    fi
  else
    brew install $1
  fi

  true
}

brew_start() {
  if [[ -n $(brew services list) ]]; then
    if brew services list | grep "^$1.*started"; then
      less_fancy_echo "... skip $1, already starting"
    else
      brew services start $1
    fi
  fi

  true
}

brew_tap() {
  if brew tap | grep -q "^$1"; then
    less_fancy_echo "... skip $1, already tapped"
  else
    brew tap $1
  fi

  true
}

brew_migrate_or_add_tap() {
  if is_brew_tap_installed $1; then
    less_fancy_echo "... migrating taps $1 -> $2"
    brew untap $1
    brew tap $2
  else
    brew_tap $2
  fi

  true
}

brew_tap_list() {
  brew tap 2> /dev/null || true
}

TAPS=$(brew_tap_list)

is_brew_tap_installed() {
  echo ${TAPS} | grep -q "\b$1"
}
### end mac-components/homebrew

fancy_echo "Installing Git, thee version control system ..."
  brew_install git

git_clone() {
  if [ ! -d $2 ]; then
    git clone $1 $2
  else
    less_fancy_echo "... skip cloning $1, already cloned"
  fi

  true
}
### end mac-components/git

fancy_echo "Installing Brew Cask, to install OSX binaries ..."
  brew_install_or_upgrade caskroom/cask/brew-cask

brew_cask_list() {
  brew cask list 2> /dev/null || true
}

# run this once, the command is slow
CASKS=$(brew_cask_list)

brew_cask_install() {
  if is_brew_cask_installed $1; then
    less_fancy_echo "... skipping cask $1, already installed"
  else
    brew cask install $1 2> /dev/null || true
  fi

  true
}

is_brew_cask_installed() {
  echo ${CASKS} | grep -q "\b$1"
}

brew_cask_link() {
  if brew cask $1 status | grep -q 'happily linked'; then
    less_fancy_echo "... skip linking $1, already linked"
  else
    brew cask $1 link
  fi
}

fancy_echo "Installing Alfred, for quick access to Facebook ..."
  brew_cask_install alfred

fancy_echo "Installing Caffeine, to fend off sleep ..."
  brew_cask_install caffeine

fancy_echo "Installing Google Chrome, you know you want it ..."
  brew_cask_install google-chrome

fancy_echo "Installing Dropbox, for sharing files ..."
  brew_cask_install dropbox

fancy_echo "Installing Google Drive, for sharing more files ..."
  brew_cask_install google-drive

fancy_echo "Installing Textmate, for a good scratch pad ..."
  brew_cask_install textmate

fancy_echo "Installing Day-O, a better menu bar clock + calendar ..."
  brew_cask_install day-o

fancy_echo "Installing F-lux, to save your eyes ..."
  brew_cask_install flux

fancy_echo "Linking Alfred, so that it sees casks ..."
  brew_cask_link alfred
### end mac-components/casks

fancy_echo "Installing wget, because sometimes you need a little wget ..."
  brew_install wget

fancy_echo "Installing ShiftIt (onsi fork), for better window management ..."
if [ ! -d /Applications/ShiftIt.app ]; then
    wget https://raw.github.com/onsi/ShiftIt/master/ShiftIt.zip
    unzip -q ShiftIt.zip
    rm ShiftIt.zip
    mv ShiftIt.app /Applications/
fi
### end mac-components/downloads

fancy_echo "Starting Postgres ..."
  # brew_start postgres
  if [[ -z $(ps aux | grep "[p]ostgres") ]]; then
    # initdb /usr/local/var/postgres -E utf8
    mkdir -p ~/Library/LaunchAgents
    ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgents
    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
  fi

fancy_echo "Starting Menu Bar Apps ..."
  start_if_needed Day-O
  start_if_needed Dropbox
  start_if_needed Caffeine
  start_if_needed ShiftIt
### end mac-components/start-services

fancy_echo "Cleaning up Brew ..."
  brew cleanup

fancy_echo "Cleaning up Brew Cask ..."
  brew cask cleanup
### end mac-components/cleanup

fancy_echo "Creating workspace ..."
  mkdir -p ~/workspace
### end common-components/dotfiles

fancy_echo "Installing your shared additions from ~/.laptop.shared ..."
  if [[ -f ~/.laptop.shared ]]; then
    source ~/.laptop.shared
  fi

fancy_echo "Installing your personal additions from ~/.laptop.local ..."
  if [[ -f ~/.laptop.local ]]; then
    source ~/.laptop.local
  fi
### end common-components/personal-additions

less_fancy_echo ""
less_fancy_echo " ${GREEN}******************"
less_fancy_echo "   TODO (manual)"
less_fancy_echo " ******************${RESET}"
less_fancy_echo ""
less_fancy_echo "   ${YELLOW}**** USING SYSTEM PREFERENCES${RESET}"
less_fancy_echo " - allow apps downloaded from Anywhere (see Security & Privacy > General)"
less_fancy_echo " - allow ShiftIt Accessibility access (see Security & Privacy > Privacy > Accessibility)"
less_fancy_echo " - hide date/time in menu bar (see Date & Time > Clock)"
less_fancy_echo ""
### end mac-components/todo

